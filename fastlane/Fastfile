desc <<-DESC
Updates the versions of the native libraries.

#### Options
* `version`: The version of the native libraries.
* `platform`: The platform to update. Leave blank to update both.

#### Examples
```sh
bundle exec fastlane update_native_libraries version:3.4.0
bundle exec fastlane update_native_libraries version:3.4.0 platform:android
bundle exec fastlane update_native_libraries version:3.4.0 platform:ios
```
DESC
lane :update_native_libraries do |options|
  version = options[:version]
  platform = options[:platform]

  if version.nil?
    UI.user_error!("Missing required 'version' parameter.")
  end

  if platform.nil? || platform.downcase == 'android'
    UI.message('Updating native Android libraries.')
    update_native_android_libraries(version)
  end

  if platform.nil? || platform.downcase == 'ios'
    UI.message('Updating native iOS libraries.')
    update_native_ios_libraries(version)
  end
end

desc <<-DESC
Updates the version of each Flutter package.

#### Options
* `version`: The new version for the libraries.

#### Examples
```sh
bundle exec fastlane bump version:3.4.0
```
DESC
lane :bump do |options|
  version = options[:version]

  if version.nil?
    UI.user_error!("Missing required 'version' parameter.")
  end

  files = Dir['../notificare*/pubspec.yaml']
  regex = /^version: .*$/
  replacement = "version: #{version}"

  files.each { |file| update_file(file, regex, replacement) }
end

desc <<-DESC
Updates the Android compile SDK version of each Flutter package.

#### Options
* `version`: The new version for the Android compile SDK.

#### Examples
```sh
bundle exec fastlane update_compile_sdk_version version:33
```
DESC
lane :update_compile_sdk_version do |options|
  version = options[:version]

  if version.nil?
    UI.user_error!("Missing required 'version' parameter.")
  end

  files = Dir['../notificare*/android/build.gradle']
  regex = /compileSdkVersion .*$/
  replacement = "compileSdkVersion #{version}"

  files.each { |file| update_file(file, regex, replacement) }
end

desc <<-DESC
Updates Kotlin version version of each Flutter package.

#### Options
* `version`: The new version for Kotlin.

#### Examples
```sh
bundle exec fastlane update_kotlin_version version:1.7.20
```
DESC
lane :update_kotlin_version do |options|
  version = options[:version]

  if version.nil?
    UI.user_error!("Missing required 'version' parameter.")
  end

  files = Dir['../notificare*/android/build.gradle']
  regex = /ext.kotlin_version = '.*'/
  replacement = "ext.kotlin_version = '#{version}'"

  files.each { |file| update_file(file, regex, replacement) }
end

desc <<-DESC
Updates the Android Gradle Plugin version of each Flutter package.

#### Options
* `version`: The new version for the Android Gradle Plugin.

#### Examples
```sh
bundle exec fastlane update_android_gradle_plugin version:7.4.2
```
DESC
lane :update_android_gradle_plugin do |options|
  version = options[:version]

  if version.nil?
    UI.user_error!("Missing required 'version' parameter.")
  end

  files = Dir['../notificare*/android/build.gradle']
  regex = /classpath 'com.android.tools.build:gradle:.*'/
  replacement = "classpath 'com.android.tools.build:gradle:#{version}'"

  files.each { |file| update_file(file, regex, replacement) }
end

desc <<-DESC
Updates the lockfile of each package and sample app pods.

#### Examples
```sh
bundle exec fastlane update_sample
```
DESC
lane :update_sample do
  UI.message('Updating Flutter packages.')
  fetch_packages

  UI.message('Updating Cocoapods repo.')
  update_pod_repo

  UI.message('Updating app pods.')
  update_pods
end

desc <<-DESC
Validates and publishes each Flutter package.

#### Options
* `dry_run`: Only run in validation mode.

#### Examples
```sh
bundle exec fastlane publish
bundle exec fastlane publish dry_run:true
```
DESC
lane :publish do |options|
  dry_run = options[:dry_run] ||= false
  publish_arguments = dry_run ? '--dry-run' : ''

  ensure_git_status_clean unless dry_run

  # Prioritising the notificare_flutter package since it is used by the core
  # notificare package.
  #
  # order = notificare_flutter > notificare > remaining packages
  directories = Dir["../notificare*"]
  directories.delete('../notificare_flutter')
  directories.unshift('../notificare_flutter')

  directories.each do |directory|
    if dry_run
      UI.message("Validating '#{directory}' package.")
    else
      UI.message("Publishing '#{directory}' package.")
    end

    stream_shell_command("cd #{directory} && flutter pub publish #{publish_arguments}")
  end
end


def update_file(path, regex, replacement)
  file = File.read(path)
  new_content = file.gsub(regex, replacement)
  File.open(path, 'w') { |line| line.puts new_content }
end

def update_native_android_libraries(version)
  files = Dir['../notificare*/android/build.gradle']
  regex = /def notificare_version = '.*'/
  replacement = "def notificare_version = '#{version}'"

  files.each { |file| update_file(file, regex, replacement) }
end

def update_native_ios_libraries(version)
  files = Dir['../notificare*/ios/*.podspec']
  regex = /notificare_version = '.*'/
  replacement = "notificare_version = '#{version}'"

  files.each { |file| update_file(file, regex, replacement) }
end

def fetch_packages
  directories = Dir['../notificare*', '../sample']

  directories.each do |directory|
    stream_shell_command("cd #{directory} && flutter pub get")
  end
end

def update_pod_repo
  stream_shell_command("cd ../sample/ios && pod repo update")
end

def update_pods
  stream_shell_command("cd ../sample/ios && pod update")
end

def stream_shell_command(command)
  success = IO.popen(command) do |io|
    while line = io.gets
      puts line.chomp
    end

    io.close

    $?.success?
  end

  UI.user_error!("Failed to execute shell script '#{command}'") unless success
end
